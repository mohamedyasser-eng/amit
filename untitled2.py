# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Gmb3FKhfJa3C8sae6g1Ir_p1EkmnThzm
"""

def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n-1) + fibonacci(n-2)

# Test the function
for i in range(10):
    print(fibonacci(i))

def find_occurrences(lst, target):
    occurrences = []
    for i, string in enumerate(lst):
        if target in string:
            occurrences.append((i, string.count(target)))
    return occurrences

# Test the function
strings = ["hello world", "hello again", "foo bar", "hello world", "baz qux"]
target = "hello"
print(find_occurrences(strings, target))

def find_pairs(lst, target_sum):
    pairs = []
    for i in range(len(lst)):
        for j in range(i+1, len(lst)):
            if lst[i] + lst[j] == target_sum:
                pairs.append((lst[i], lst[j]))
    return pairs

# Test the function
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
target_sum = 10
print(find_pairs(numbers, target_sum))

def max_product_pair(lst):
    max_product = float('-inf')
    max_pair = ()
    for i in range(len(lst)):
        for j in range(i+1, len(lst)):
            product = lst[i] * lst[j]
            if product > max_product:
                max_product = product
                max_pair = (lst[i], lst[j])
    return max_pair

# Test the function
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
print(max_product_pair(numbers))

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

# Test the function
print(is_prime(25))
print(is_prime(23))

def print_even_numbers(lst):
    for num in lst:
        if num % 2 == 0:
            print(num)

# Test the function
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print_even_numbers(numbers)

def reverse_words(s):
    return ' '.join(s.split()[::-1])

# Test the function
print(reverse_words("Hello world"))

def is_palindrome(x: int) -> bool:
    if x < 0:
        return False
    original_num = x
    reversed_num = 0
    while x != 0:
        digit = x % 10
        reversed_num = reversed_num * 10 + digit
        x = x // 10
    return original_num == reversed_num

# Test the function
print(is_palindrome(121))

def is_palindrome(x: int) -> bool:
    if x < 0:
        return False
    original_num = x
    reversed_num = 0
    while x != 0:
        digit = x % 10
        reversed_num = reversed_num * 10 + digit
        x = x // 10
    return original_num == reversed_num

# Test the function
print(is_palindrome(121))
print(is_palindrome(-121))

def is_palindrome(s: str) -> bool:
    s = s.lower().replace(" ", "").replace(",", "").replace(".", "")
    return s == s[::-1]

# Test the function
print(is_palindrome("A man, a plan, a canal: Panama"))

def print_squares():
    squares = [i ** 2 for i in range(1, 31)]
    print(squares)

print_squares()